#!/bin/bash
# We do NOT use 'set -e' here because we want to manually handle the exit code
# of the test command to provide better error feedback.

echo "INFO: Autograder script started."

# Define a default package structure for robustness
PACKAGE_DIR="src/main/java/com/autograder"
TEST_PACKAGE_DIR="src/test/java/com/autograder"

# --- Project Setup Logic ---
# Check if a pom.xml was provided by the teacher (full project upload)
if [ -f "/autograder/tests/pom.xml" ]; then
    echo "INFO: Full project structure detected. Using provided pom.xml."
    cp -r /autograder/tests/* .
else
    echo "INFO: Single test file detected. Creating minimal Maven project structure..."
    
    # 1. Create the necessary directory structure with packages
    mkdir -p $PACKAGE_DIR
    mkdir -p $TEST_PACKAGE_DIR

    # 2. Find the teacher's single .java test file
    TEACHER_TEST_FILE=$(find /autograder/tests -name '*.java')
    if [ -z "$TEACHER_TEST_FILE" ]; then
        echo "ERROR: No .java test file found in the tests directory." >&2
        echo '{ "error": "No .java test file was provided by the teacher." }' > /autograder/results/results.json
        exit 0
    fi
    
    # 3. Add the package declaration to the test file and move it
    echo "INFO: Modifying and moving teacher's test file..."
    sed -i '1s/^/package com.autograder;\n/' $TEACHER_TEST_FILE
    mv $TEACHER_TEST_FILE $TEST_PACKAGE_DIR/

    # 4. Create a minimal pom.xml file on the fly
    cat > pom.xml <<- EOM
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>autograder-test</artifactId>
    <version>1.0-SNAPSHOT</version>
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
            </plugin>
        </plugins>
    </build>
</project>
EOM
fi

# --- Place Student Code ---
echo "INFO: Modifying and placing student's code..."
# Add the package declaration to the student's code file
sed -i '1s/^/package com.autograder;\n/' /autograder/source/Solution.java
# Move the modified file to the correct package directory
cp /autograder/source/Solution.java $PACKAGE_DIR/

# --- Run Tests ---
echo "INFO: Compiling and running tests with Maven..."
# Run the test command but allow it to fail without exiting the script.
# We will check for the output files to determine success.
mvn test > /autograder/results/raw_output.log 2>&1 || true

# --- Translate Results ---
# Find the XML report generated by JUnit.
LATEST_REPORT=$(find target/surefire-reports -name '*.xml' -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d' ')

# Check if the report file was created. If not, compilation failed.
if [ -z "$LATEST_REPORT" ]; then
    echo "ERROR: Could not find JUnit XML report. Compilation or tests likely failed." >&2
    # Create a results.json with an error message.
    echo '{ "error": "Code failed to compile or tests could not run. Check raw_output.log for details." }' > /autograder/results/results.json
    exit 0 # Exit gracefully. The error is in the JSON.
fi

echo "INFO: Translating JUnit XML report into standard results.json..."
python3 translate_results.py $LATEST_REPORT /autograder/results/results.json

echo "INFO: Grading complete."